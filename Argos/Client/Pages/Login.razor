@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<style>
	.login-form {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
		background: linear-gradient(180deg, rgba(5, 39, 103, 0.7) 0%, rgba(58, 6, 71, 0.7) 70%);
		border-radius: 20px;
		padding: 20px;
	}

		.login-form .mb-3 {
			margin-bottom: 20px;
		}

	.login-button {
		background: linear-gradient(180deg, rgba(5, 39, 103, 0.7) 0%, rgba(58, 6, 71, 0.7) 70%) !important;
		align-items: center;
	}

	.input-box {
		width: 300px !important;
	}

	.login-title {
		margin-bottom: 30px;
		text-align: center;
		color: #fff;
		font-size: 28px;
		font-weight: bold;
	}

	.form-label {
		color: #fff;
		font-size: 18px;
	}
</style>

<PageTitle>Login</PageTitle>

<div class="login-form">
	<h3 class="login-title">Welcome back!</h3>
	<EditForm Model="user" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator />
		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<InputText id="email" @bind-Value="user.Email" class="form-control input-box"></InputText>
			<ValidationMessage For="@(() => user.Email)" />
		</div>
		<div class="mb-3">
			<label for="password" class="form-label">Password</label>
			<InputText id="password" @bind-Value="user.Password" class="form-control input-box" type="password"></InputText>
			<ValidationMessage For="@(() => user.Password)" />
		</div>
		<button type="submit" class="btn btn-primary login-button">Login</button>
	</EditForm>
	<div class="text-danger">
		<span>
			@errorMessage
		</span>
	</div>
</div>


@code {
	private UserLogin user = new UserLogin();
	private string errorMessage = string.Empty;
	private string returnUrl = string.Empty;

	protected override void OnInitialized()
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
		{
			returnUrl = url;
		}
	}

	private async Task HandleLogin()
	{
		var result = await AuthService.Login(user);

		if(result.Success)
		{
			errorMessage = string.Empty;

			await LocalStorageService.SetItemAsync("authToken", result.Data);
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			await CartService.StoreCartItems(true);
			NavigationManager.NavigateTo(returnUrl);
		}
		else
		{
			errorMessage = result.Message;
		}
	}
}
